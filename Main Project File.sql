USE `classicmodels`;

show tables;

select * from customers;
SELECT * from employees;
select * from  orders;
select * from orderdetails;
SELECT * from payments;
select * from products;
select * from orderdetails;
select * from productlines;



-- Q1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed

create view top_customer as (
select customername, count(ordernumber) as count_of_orders_placed
from customers c
inner join orders o
on c.customernumber = o.customernumber
group by 1 
order by count_of_orders_placed desc
limit 10
);

select * from top_customer;

--  or 

select customername, order_count
from (select c.customername, count(ordernumber) as order_count
      from customers c 
      inner join orders o using(customernumber)
      group by 1
      ) as subquery
order by order_count desc
limit 10;


-- Q2. Retrieve the list of customers who have placed orders but haven't made any payments yet.

select  c.customernumber, c.customername
from customers c 
where  not exists ( select 1 from payments p
                    where p.customernumber = c.customernumber); 

-- or

select c.customernumber, c.customername
from customers c 
where c.customernumber not in ( select customernumber from payments p); 


-- Q3.Retrieve a product that has been ordered the least number of times. Display the product code, product name, and the number of times it has been ordered.

create view least_no_of_orders as (
select p.productCode, P.productName, count(quantityordered) as no_of_orders
from orderdetails o 
inner join products p using(productCode)
group by 1,2
order by no_of_orders asc
);

select * from least_no_of_orders;

-- or

select productcode, productname, no_of_time_orders
from (select p.productCode, P.productName, count(quantityordered) as no_of_time_orders
from orderdetails o 
inner join products p using(productCode)
group by 1,2) as sunquery
order by no_of_time_orders asc;


-- Q4. Classic Models has a product line called "Vintage Cars." 
-- The management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). 
--- Write a MySQL stored procedure that takes no input parameters and returns total revenue of the "Vintage Cars" product line for the last quarter of 2003.

delimiter $$
create procedure calculate_revenue_of_vintage_car()
begin
select P1.productLine, Sum(amount) as total_revenue
from products p1
inner join orderdetails od using(productCode)
inner join orders o using(orderNumber)
inner join payments p2 using(customerNumber) 
where p1.productLine = 'Vintage Cars' and (p2.paymentDate >= '2003-10-01' and p2.paymentDate <= '2003-12-31')
group by 1;
end $$

call  calculate_revenue_of_vintage_car();

Call CalculateVintageCarsRevenue1();
 
DELIMITER $$
create procedure CalculateVintageCarsRevenue1()
BEGIN
    SELECT p1.productLine, SUM(priceEach * quantityOrdered) AS total_revenue
    FROM products p1
    JOIN orderdetails od USING (productCode)
    JOIN orders o  USING (orderNumber)
    WHERE p1.productLine = 'Vintage Cars' AND (o.orderdate >= '2003-10-01' AND o.orderdate <= '2003-12-31');
END $$


-- 	Q5. Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers along with their total order values across all orders.


with total_value as (
 select distinct c.contactfirstname as first_name, c.contactlastname as last_name, c.customername,
   sum(amount) over (partition by c.customername) as total_order_value
     from customers c 
       inner join orders o 
         on c.customernumber = o.customernumber
            inner join orderdetails od 
			  on o.ordernumber = od.ordernumber
                inner join payments p 
                   on p.customernumber = c.customernumber
), 
 customer_rank as
    (select first_name, last_name, customername, total_order_value,
      rank() over (order by total_order_value desc) as customer_rank
        from total_value)

select customer_rank, first_name,last_name, customername, total_order_value
from customer_rank
limit 5;














